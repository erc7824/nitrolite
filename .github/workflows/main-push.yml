name: Push on main branch

on:
  push:
    branches: [ main ]

jobs:
  test-clearnode:
    name: Test (Clearnode)
    uses: ./.github/workflows/test-go.yml
    with:
      project-path: 'clearnode'
      project-name: 'Clearnode'

  test-forge:
    name: Test (Foundry)
    uses: ./.github/workflows/test-forge.yml
    with:
      project-path: 'contract'
      project-name: 'Foundry'

  test-sdk:
    name: Test (SDK)
    uses: ./.github/workflows/test-sdk.yml
    with:
      project-path: 'sdk'
      project-name: 'SDK'

  test-examples:
    name: Test Examples Compilation
    uses: ./.github/workflows/build-node-project.yml
    strategy:
      matrix:
        include:
          - path: examples/snake/client
            name: Snake Client
          - path: examples/snake/server
            name: Snake Server
          - path: examples/tictactoe/client
            name: Tic Tac Toe Client
          # NOTE: TicTacToe does not require to be compiled,
          #       still it's present here just to make sure all
          #       components of example apps are listed.
          # - path: examples/tictactoe/server
          #   name: Tic Tac Toe Server
    with:
      project-path: ${{ matrix.path }}
      project-name: ${{ matrix.name }}

  auto-tag:
    name: Auto-Tag
    needs: test-clearnode
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image-tag: ${{ steps.tagger.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run auto tag script
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

          ./clearnode/scripts/auto_tag.sh

      - name: Get the new tag without 'v' prefix
        id: tagger
        run: |
          NEW_TAG=$(git describe --tags --abbrev=0)
          NEW_TAG_WITHOUT_V=${NEW_TAG#v}
          echo "new_tag=$NEW_TAG_WITHOUT_V" >> $GITHUB_OUTPUT

  build-and-publish-clearnode:
    name: Build and Publish (Clearnode)
    needs: auto-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.tagger.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Save image tag
        id: tagger
        run: |
          echo "image_tag=${{ needs.auto-tag.outputs.image-tag }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: clearnode
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/clearnode:${{ needs.auto-tag.outputs.image-tag }}
            ghcr.io/${{ github.repository }}/clearnode:latest-rc
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy Clearnode
    needs: build-and-publish-clearnode
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER_NAME: uat
      GKE_CLUSTER_ZONE: europe-central2
      GKE_BASTION_NAME: gke-uat-bastion
      GKE_BASTION_ZONE: europe-central2-a
      HELM_NAMESPACE: clearnet-uat
      HELM_RELEASE: clearnode
      HELM_CONFIG_ENV: uat
      KUBECONFIG: kubeconfig.conf

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: '${{ secrets.GKE_UAT_SA_KEY }}'

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GKE_PROJECT }}
        install_components: gke-gcloud-auth-plugin

    - name: Get GKE credentials
      run: |-
        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} \
          --project ${PROJECT_ID} \
          --zone ${GKE_CLUSTER_ZONE} \
          --internal-ip

    - name: Port-forward to GKE Bastion
      run: |-
        gcloud compute ssh ${GKE_BASTION_NAME} \
          --tunnel-through-iap \
          --project ${PROJECT_ID} \
          --zone ${GKE_BASTION_ZONE} \
          --ssh-key-expiration=600s \
          -- -NL8888:127.0.0.1:8888 &
        sleep 5

    - name: Install Helm
      uses: azure/setup-helm@v4

    - name: Release
      env:
        HTTPS_PROXY: http://localhost:8888
      run: |-
        helm upgrade -i ${HELM_RELEASE} clearnode/chart \
          -n ${HELM_NAMESPACE} \
          --reuse-values \
          -f clearnode/chart/config/${HELM_CONFIG_ENV}/clearnode.yaml \
          --set image.tag="${{ needs.build-and-publish-clearnode.outputs.image-tag }}"

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [deploy, test-forge, test-sdk]
    if: always()

    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: deployments
          SLACK_USERNAME: CI/CD Bot
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || contains(needs.*.result, 'cancelled') && 'cancelled' || 'success' }}
          SLACK_TITLE: 'Nitrolite Clearnode Release Candidate'
          SLACK_MESSAGE_ON_SUCCESS: '✅ RC build and deployment completed successfully!'
          SLACK_MESSAGE_ON_FAILURE: '❌ RC build or deployment failed!'
          SLACK_MESSAGE_ON_CANCEL: '⚠️ RC build or deployment was cancelled!'
          SLACK_FOOTER: 'Nitrolite CI/CD Pipeline'
