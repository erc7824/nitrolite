name: Push on main branch

on:
  push:
    branches: [ main ]

jobs:
  test-clearnode:
    name: Test (Clearnode)
    uses: ./.github/workflows/test-go.yml
    with:
      project-path: 'clearnode'
      project-name: 'Clearnode'

  test-forge:
    name: Test (Foundry)
    uses: ./.github/workflows/test-forge.yml
    with:
      project-path: 'contract'
      project-name: 'Foundry'

  test-sdk:
    name: Test (SDK)
    uses: ./.github/workflows/test-sdk.yml
    with:
      project-path: 'sdk'
      project-name: 'SDK'

  build-and-publish-sdk:
    needs: test-sdk
    name: Build and Publish (SDK)
    uses: ./.github/workflows/publish-sdk.yml
    secrets:
      npm-token: ${{ secrets.NPM_TOKEN }}
  
  auto-tag:
    name: Auto-Tag
    needs: test-clearnode
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      image-tag: ${{ steps.tagger.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run auto tag script
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"

          ./clearnode/scripts/auto_tag.sh

      - name: Get the new tag without 'v' prefix
        id: tagger
        run: |
          NEW_TAG=$(git describe --tags --abbrev=0)
          NEW_TAG_WITHOUT_V=${NEW_TAG#v}
          echo "new_tag=$NEW_TAG_WITHOUT_V" >> $GITHUB_OUTPUT

  build-and-publish-clearnode:
    name: Build and Publish (Clearnode)
    needs: auto-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.tagger.outputs.image_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Save image tag
        id: tagger
        run: |
          echo "image_tag=${{ needs.auto-tag.outputs.image-tag }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: clearnode
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/clearnode:${{ needs.auto-tag.outputs.image-tag }}
            ghcr.io/${{ github.repository }}/clearnode:latest-rc
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-uat:
    name: Deploy to UAT
    needs: build-and-publish-clearnode
    uses: ./.github/workflows/deploy-clearnode.yaml
    with:
      target-env: uat
      image-tag: ${{ needs.build-and-publish-clearnode.outputs.image-tag }}
    secrets:
      gke-project: ${{ secrets.GKE_PROJECT }}
      gke-sa-key: ${{ secrets.GKE_UAT_SA_KEY }}

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [deploy-uat, test-forge, test-sdk]
    if: always()

    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_CHANNEL: deployments
          SLACK_USERNAME: CI/CD Bot
          SLACK_COLOR: ${{ contains(needs.*.result, 'failure') && 'failure' || contains(needs.*.result, 'cancelled') && 'cancelled' || 'success' }}
          SLACK_ICON_EMOJI: ${{ contains(needs.*.result, 'failure') && ':x:' || contains(needs.*.result, 'cancelled') && ':warning:' || ':white_check_mark:' }}
          SLACK_TITLE: 'Nitrolite Clearnode Release Candidate'
          SLACK_MESSAGE_ON_SUCCESS: |
            ✅ RC build and deployment completed successfully!
            ${{github.event.head_commit.message}}
          SLACK_MESSAGE_ON_FAILURE: |
            ❌ RC build or deployment failed!
            ${{github.event.head_commit.message}}
          SLACK_MESSAGE_ON_CANCEL: |
            ⚠️ RC build or deployment was cancelled!
            ${{github.event.head_commit.message}}
          SLACK_FOOTER: 'Nitrolite CI/CD Pipeline'

  build-and-deploy-docs-firebase:
    name: Deploy to Firebase Hosting on merge
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: npm install && npm run build
        working-directory: erc7824-docs

      - uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          # repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_ERC7824 }}
          channelId: live
          projectId: erc7824
          entryPoint: ./erc7824-docs
