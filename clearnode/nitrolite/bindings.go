// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nitrolite

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Allocation is an auto generated low-level Go binding around an user-defined struct.
type Allocation struct {
	Destination common.Address
	Token       common.Address
	Amount      *big.Int
}

// Channel is an auto generated low-level Go binding around an user-defined struct.
type Channel struct {
	Participants []common.Address
	Adjudicator  common.Address
	Challenge    uint64
	Nonce        uint64
}

// Signature is an auto generated low-level Go binding around an user-defined struct.
type Signature struct {
	V uint8
	R [32]byte
	S [32]byte
}

// State is an auto generated low-level Go binding around an user-defined struct.
type State struct {
	Intent      uint8
	Version     *big.Int
	Data        []byte
	Allocations []Allocation
	Sigs        []Signature
}

// CustodyMetaData contains all meta data concerning the Custody contract.
var CustodyMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"challenge\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"candidate\",\"type\":\"tuple\",\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]},{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structState[]\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkpoint\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"candidate\",\"type\":\"tuple\",\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]},{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structState[]\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"close\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"candidate\",\"type\":\"tuple\",\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]},{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structState[]\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"create\",\"inputs\":[{\"name\":\"ch\",\"type\":\"tuple\",\"internalType\":\"structChannel\",\"components\":[{\"name\":\"participants\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"adjudicator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challenge\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]},{\"name\":\"initial\",\"type\":\"tuple\",\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"outputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deposit\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"getAccountChannels\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32[]\",\"internalType\":\"bytes32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getAccountInfo\",\"inputs\":[{\"name\":\"user\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"available\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"channelCount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"join\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"sig\",\"type\":\"tuple\",\"internalType\":\"structSignature\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"resize\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"candidate\",\"type\":\"tuple\",\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]},{\"name\":\"proofs\",\"type\":\"tuple[]\",\"internalType\":\"structState[]\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"withdraw\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Challenged\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"expiration\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Checkpointed\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Closed\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Created\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"channel\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structChannel\",\"components\":[{\"name\":\"participants\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"adjudicator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"challenge\",\"type\":\"uint64\",\"internalType\":\"uint64\"},{\"name\":\"nonce\",\"type\":\"uint64\",\"internalType\":\"uint64\"}]},{\"name\":\"initial\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structState\",\"components\":[{\"name\":\"intent\",\"type\":\"uint8\",\"internalType\":\"enumStateIntent\"},{\"name\":\"version\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"allocations\",\"type\":\"tuple[]\",\"internalType\":\"structAllocation[]\",\"components\":[{\"name\":\"destination\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"sigs\",\"type\":\"tuple[]\",\"internalType\":\"structSignature[]\",\"components\":[{\"name\":\"v\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]}]}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Joined\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Opened\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Resized\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"deltaAllocations\",\"type\":\"int256[]\",\"indexed\":false,\"internalType\":\"int256[]\"}],\"anonymous\":false},{\"type\":\"error\",\"name\":\"ChallengeNotExpired\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ChannelNotFinal\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ChannelNotFound\",\"inputs\":[{\"name\":\"channelId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignature\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureLength\",\"inputs\":[{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"ECDSAInvalidSignatureS\",\"inputs\":[{\"name\":\"s\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}]},{\"type\":\"error\",\"name\":\"InsufficientBalance\",\"inputs\":[{\"name\":\"available\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"required\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"type\":\"error\",\"name\":\"InvalidAdjudicator\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAllocations\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidAmount\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidChallengePeriod\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidParticipant\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidState\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidStateSignatures\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"InvalidStatus\",\"inputs\":[]},{\"type\":\"error\",\"name\":\"TransferFailed\",\"inputs\":[{\"name\":\"token\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]",
	Bin: "0x60808060405234601557613c42908161001b8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063259311c914611dfe57806347e7ef2414611cd75780636332fef614611c6c5780637de7ad62146117bb5780637e2d8d72146116fe578063a22b823d146114a0578063d0cce1e8146110d2578063d37ff7b514610842578063de22731f146102335763f3fef3a31461008a57600080fd5b3461022e57604060031936011261022e576100a3612734565b602435903360005260016020526040600020906001600160a01b038116600052816020526040600020548381106101fc57506001600160a01b03168061016f57600080808086335af13d1561016a573d6100fc816127f1565b9061010a60405192836127ce565b8152600060203d92013e5b15610134576000526020526101306040600020918254612a3b565b9055005b90507fbf182be8000000000000000000000000000000000000000000000000000000006000526004523360245260445260646000fd5b610115565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201528360248201526020816044816000865af19081156101f0576000916101c1575b50610115565b6101e3915060203d6020116101e9575b6101db81836127ce565b810190612a79565b386101bb565b503d6101d1565b6040513d6000823e3d90fd5b83907fcf4791810000000000000000000000000000000000000000000000000000000060005260045260245260446000fd5b600080fd5b3461022e57610241366126b8565b50508160005260006020526040600020906003820160ff815416600581101561082c57801561081757600281036107b257508135600481101561022e5761028781612b1b565b600381036107a157602083013580156107a157608084019060026102ab8387612c6f565b905003610790576102ce6102be87612ca5565b6102c836886128f4565b906134b3565b1561079057600d86016000936102e381612b1b565b60ff60ff198354169116179055600e860155600f85016103066040860186612d01565b9067ffffffffffffffff821161077c576103208354612d34565b601f8111610741575b508490601f83116001146106dd5761035892918691836106d2575b50506000198260011b9260031b1c19161790565b90555b6010850161036c6060860186612c6f565b91906103788383612d85565b9084526020842084915b83831061066c575050505061039b601186019185612c6f565b906103a68284612e0c565b9183526020832083925b82841061062b575050835460ff1916600417909355506103e3926103dc925090505b6060810190612c6f565b3691612825565b80519060005b82811061060e5750505033600052600160205261040d8260016040600020016139ed565b5080549060005b8281106105d357838060005260006020526040600020805460008255806105b7575b506000600182015560006002820155600060038201556104586004820161345a565b6104646008820161345a565b6000600c8201556000600d8201556000600e820155600f81016104878154612d34565b9081610573575b5050601081018054906000815581610532575b505060110180549060008155816104db575b827f7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79600080a2005b8160030291600383040361051c57600090815260208120918201915b82811061050457506104b3565b808260039255826001820155826002820155016104f7565b634e487b7160e01b600052601160045260246000fd5b8160030291600383040361051c57600090815260208120918201915b82811061055b57506104a1565b8082600392558260018201558260028201550161054e565b81601f6000931160011461058b5750555b828061048e565b818352602083206105a791601f0160051c810190600101612d6e565b8082528160208120915555610584565b6105cd9082600052602060002090810190612d6e565b82610436565b806001600160a01b036105e8600193856132af565b90549060031b1c166000528160205261060785836040600020016139ed565b5001610414565b8061062561061e60019385612a65565b51876138c2565b016103e9565b803560ff811680910361066857606060019260039260ff1986541617855560208101358486015560408101356002860155019201930192906103b0565b8580fd5b60036060826001600160a01b03610684600195612df8565b166001600160a01b03198654161785556106a060208201612df8565b6001600160a01b0385870191166001600160a01b03198254161790556040810135600286015501920192019190610382565b013590508a80610344565b8386526020862091601f198416875b818110610729575090846001959493921061070f575b505050811b01905561035b565b60001960f88560031b161c19910135169055898080610702565b919360206001819287870135815501950192016106ec565b61076c9084875260208720601f850160051c81019160208610610772575b601f0160051c0190612d6e565b89610329565b909150819061075f565b602485634e487b7160e01b81526041600452fd5b63773a750f60e01b60005260046000fd5b63baf3f0f760e01b60005260046000fd5b60030361080657600c83015442106107dc576103e3916103dc91600460ff198254161790556103d2565b7f151f07fe0000000000000000000000000000000000000000000000000000000060005260046000fd5b6307a92f1960e51b60005260046000fd5b846379c1d89f60e11b60005260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b3461022e57604060031936011261022e5760043567ffffffffffffffff811161022e57806004019080360391608060031984011261022e576024359167ffffffffffffffff831161022e57826004019060a0600319853603011261022e5760026108ac8480613332565b9050036110c157602481016001600160a01b036108c882612df8565b161561109757604482019067ffffffffffffffff6108e583613368565b161561106d578335600481101561022e576108ff81612b1b565b600181036107a157602487013593846107a15761092461091f3689613392565b61382a565b9788600052600060205260ff60036040600020015416600581101561082c5761080657610964610954368a613392565b61095e368a6128f4565b90613641565b60848201906001610975838b612c6f565b90500361079057610986828a612c6f565b15611057576109958b80613332565b92909215611057576109b46109ac6109ba94612df8565b9236906128bb565b90613729565b156107905760648201906109ce828a612c6f565b90506109da8b80613332565b91905003611046578a60005260006020526040600020926109fb8b80613332565b9067ffffffffffffffff821161103057680100000000000000008211611030578554828755808310611012575b5085600052602060002060005b838110610ff75750505050600184016001600160a01b03610a5589612df8565b166001600160a01b0319825416178155610a6e89613368565b7fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff7bffffffffffffffff000000000000000000000000000000000000000083549260a01b1691161790556002840198606486019967ffffffffffffffff610ad48c613368565b82547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001691161790556003850180547fffffffffffffffffffffff000000000000000000000000000000000000000000163360081b74ffffffffffffffffffffffffffffffffffffffff0016176001179055600096600d860190610b5781612b1b565b60ff60ff198354169116179055600e850155610b7a6044600f860192018b612d01565b9067ffffffffffffffff8211610fe357610b948354612d34565b601f8111610fb3575b508790601f8311600114610f4f57610bcb9291899183610f445750506000198260011b9260031b1c19161790565b90555b60108301610bdc838b612c6f565b9190610be88383612d85565b9087526020872087915b838310610ede5750505050610c0b60118401918a612c6f565b90610c168284612e0c565b9186526020862086925b828410610e9d575050505089610c368a80613332565b6008850193600486019250875b828110610e0757505050916001600160a01b0380610c626009956132c7565b610c788282511695602083019687519133613761565b5116166001600160a01b031982541617905551910155610c988780613332565b15610df357610cae6001600160a01b0391612df8565b1682526001602052610cc6886001604085200161397f565b506040519860408a527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd60c08b0198359101811215610def5701906024600483013592019667ffffffffffffffff8311610deb578260051b36038813610deb57608060408b015282905260e089019691905b818110610dc35750505085947feb84f2497711f038aa068f535dac65569ca5f694054c11ee7439cde9443821649467ffffffffffffffff610da68a9682610d9b60209d986001600160a01b03610d90610db89a61274a565b1660608b015261337d565b16608088015261337d565b1660a085015283820389850152612ed8565b0390a2604051908152f35b9091966020806001926001600160a01b03610ddd8c61274a565b168152019801929101610d38565b5080fd5b8280fd5b602483634e487b7160e01b81526032600452fd5b8192939450610e708d6040610e4184610e2f87610e3b6020610e3585610e2f60019d8b612c6f565b90612e93565b01612df8565b95612c6f565b01356001600160a01b0360405192610e5884612796565b1682526020820152610e6a8388612e7f565b906132ee565b610e92604051610e7f81612796565b8a81528a6020820152610e6a8389612e7f565b01908d939291610c43565b803560ff8116809103610eda57606060019260039260ff198654161785556020810135848601556040810135600286015501920193019290610c20565b8880fd5b60036060826001600160a01b03610ef6600195612df8565b166001600160a01b0319865416178555610f1260208201612df8565b6001600160a01b0385870191166001600160a01b03198254161790556040810135600286015501920192019190610bf2565b013590503880610344565b8389526020892091601f1984168a5b818110610f9b5750908460019594939210610f81575b505050811b019055610bce565b60001960f88560031b161c199101351690558f8080610f74565b91936020600181928787013581550195019201610f5e565b610fdd90848a5260208a20601f850160051c8101916020861061077257601f0160051c0190612d6e565b8f610b9d565b602488634e487b7160e01b81526041600452fd5b600190602061100585612df8565b9401938184015501610a35565b61102a90876000528360206000209182019101612d6e565b8f610a28565b634e487b7160e01b600052604160045260246000fd5b6314b932c760e21b60005260046000fd5b634e487b7160e01b600052603260045260246000fd5b7fb4e124330000000000000000000000000000000000000000000000000000000060005260046000fd5b7fea9e70ce0000000000000000000000000000000000000000000000000000000060005260046000fd5b6350a2e21f60e11b60005260046000fd5b3461022e576110e0366126b8565b91836000526000602052604060002092600384019260ff84541691600583101561082c57821561148b576000926004811461147c5760808501936111248587612c6f565b90501561146d575060011480611460575b6107a157602061116b916001600160a01b036001890154169360405193849283926305b959ef60e01b8452898c6004860161303b565b0381855afa9081156101f057600091611441575b50156107a157602083013590600d8601600e870191825484146107a1576111b090866111aa846130d4565b91613574565b156107a1578435600481101561022e576111c981612b1b565b60ff60ff19835416911617905555600f84016111e86040840184612d01565b9067ffffffffffffffff8211611030576112028354612d34565b601f811161140f575b50600090601f83116001146113ab5761123b9291600091836113a05750506000198260011b9260031b1c19161790565b90555b6010840161124f6060840184612c6f565b919061125b8383612d85565b9060005260206000206000915b83831061133a5750505050611281906011850192612c6f565b9061128c8284612e0c565b9160005260206000206000925b8284106112fc575050505060ff815416600581101561082c576003146112e2575b827f1f681d6befe6e92b986338164917aaa3f065b8d2de29bb520aa373114e5ec034600080a2005b600091600c91600260ff19825416179055015581806112ba565b80359060ff821680920361022e57606060039160019360ff198654161785556020810135848601556040810135600286015501920193019290611299565b60036060826001600160a01b03611352600195612df8565b166001600160a01b031986541617855561136e60208201612df8565b6001600160a01b0385870191166001600160a01b03198254161790556040810135600286015501920192019190611268565b013590508980610344565b8382526020822091601f198416815b8181106113f757509084600195949392106113dd575b505050811b01905561123e565b60001960f88560031b161c199101351690558880806113d0565b919360206001819287870135815501950192016113ba565b61143b90846000526020600020601f850160051c8101916020861061077257601f0160051c0190612d6e565b8861120b565b61145a915060203d6020116101e9576101db81836127ce565b8761117f565b5060208401351515611135565b8063773a750f60e01b60049252fd5b6004846307a92f1960e51b8152fd5b866379c1d89f60e11b60005260045260246000fd5b3461022e5760a060031936011261022e576024356004356060367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc011261022e578060005260006020526040600020600381019060ff82541693600585101561082c5784156116e9576001600095036116da57600181036116cb5760088201600161152b8383612e7f565b5001546116bc576001600160a01b0361154483856132af565b90549060031b1c1661156461155885612ca5565b61095e600d87016130d4565b906040516115718161277a565b6044359260ff841684036116b85761159a93825260643560208301526084356040830152613729565b156116a9576115de90610e6a836115bd6115b78260048901612e7f565b506132c7565b926115d96001600160a01b038551166020860151908b33613761565b612e7f565b815460011015611695579381847fe8e915db7b3549b9e9e9b3e2ec2dc3edd1f76961504366998824836401f6846a6020809883979686526001600160a01b03600183882001541686526001825261163b846001604089200161397f565b50604051908152a26007600b8201549101541461165e575b505050604051908152f35b7fd087f17acc177540af5f382bc30c65363705b90855144d285a822536ee11fdd191600260ff1982541617905580a2808380611653565b602485634e487b7160e01b81526032600452fd5b60048663773a750f60e01b8152fd5b8980fd5b6004866350a2e21f60e11b8152fd5b6004856350a2e21f60e11b8152fd5b6004856307a92f1960e51b8152fd5b836379c1d89f60e11b60005260045260246000fd5b3461022e57602060031936011261022e576001600160a01b0361171f612734565b16600052600160205260016040600020016040518060208354918281520190819360005260206000209060005b8181106117a557505050816117629103826127ce565b6040519182916020830190602084525180915260408301919060005b81811061178c575050500390f35b825184528594506020938401939092019160010161177e565b825484526020909301926001928301920161174c565b3461022e576117c9366126b8565b9091836000526000602052604060002092600384019260ff84541691600583101561082c57821561148b576000926004811461147c57608085019361180e8587612c6f565b90501561146d575060011480611c5f575b6107a15760408401916118328386612d01565b9050611bb3575b6118438386612d01565b9050158015611b77575b611ae0575b5050600d85018335600481101561022e5761186c81612b1b565b60ff60ff1983541691161790556020830135600e860155611891600f86019184612d01565b9067ffffffffffffffff8211611030576118ab8354612d34565b601f8111611aae575b50600090601f8311600114611a4a576118e49291600091836113a05750506000198260011b9260031b1c19161790565b90555b601084016118f86060840184612c6f565b91906119048383612d85565b9060005260206000206000915b8383106119e4575050505061192a906011850192612c6f565b906119358284612e0c565b9160005260206000206000925b8284106119a657867f08818bbbf6e59017d5461143d9f1c4e3fb74703f7fb792c207cbeed4b344cefc60208888600c61198c67ffffffffffffffff600185015460a01c1642612c62565b9201918255600360ff1982541617905554604051908152a2005b80359060ff821680920361022e57606060039160019360ff198654161785556020810135848601556040810135600286015501920193019290611942565b60036060826001600160a01b036119fc600195612df8565b166001600160a01b0319865416178555611a1860208201612df8565b6001600160a01b0385870191166001600160a01b03198254161790556040810135600286015501920192019190611911565b8382526020822091601f198416815b818110611a965750908460019594939210611a7c575b505050811b0190556118e7565b60001960f88560031b161c19910135169055888080611a6f565b91936020600181928787013581550195019201611a59565b611ada90846000526020600020601f850160051c8101916020861061077257601f0160051c0190612d6e565b886118b4565b6020611b12916001600160a01b0360018a0154169360405193849283926305b959ef60e01b84528a8d6004860161303b565b0381855afa9081156101f057600091611b58575b50156107a157600e8601546020850135146107a157611b4c90846111aa600d89016130d4565b156107a1578680611852565b611b71915060203d6020116101e9576101db81836127ce565b88611b26565b508435600481101561022e57611b8c81612b1b565b60018114159081611b9e575b5061184d565b60029150611bab81612b1b565b141589611b98565b8435600481101561022e57611bc781612b1b565b60018103611bd6575b50611839565b6002600091611be481612b1b565b03611bd057611bfc600589015460078a015490612c62565b60608701611c0a8189612c6f565b91909115611c4b57611c1c9089612c6f565b60011015611c4b5790604060a0611c37930135910135612c62565b14611bd057806314b932c760e21b60049252fd5b602484634e487b7160e01b81526032600452fd5b506020840135151561181f565b3461022e57604060031936011261022e57611c85612734565b6024356001600160a01b038116810361022e576001600160a01b036040921660005260016020526001600160a01b03826000209116600052806020526001826000205491015482519182526020820152f35b604060031936011261022e57611ceb612734565b602435906001600160a01b031680611d5457813403611d2a575b3360005260016020526040600020906000526020526101306040600020918254612c62565b7f2c5211c60000000000000000000000000000000000000000000000000000000060005260046000fd5b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201528260448201526020816064816000865af19081156101f057600091611ddf575b50611d05577fbf182be8000000000000000000000000000000000000000000000000000000006000526004523060245260445260646000fd5b611df8915060203d6020116101e9576101db81836127ce565b83611da6565b3461022e57611e0c366126b8565b919083600052600060205260406000209060ff60038301541694600586101561082c5785156126a4576002600096036126955784156125b957813592609e1983360301938481121561269157611e6590840136906128f4565b60001987019587871161267d57601f19611e97611e818961280d565b98611e8f6040519a8b6127ce565b808a5261280d565b01895b81811061264657505060015b88811015611f0e578060051b86013587811215611f0a578601600019820190828211611ef65760019291611ede611eef9236906128f4565b611ee8828d612a65565b528a612a65565b5001611ea6565b60248c634e487b7160e01b81526011600452fd5b8a80fd5b50889450866001600160a01b0360018501541660405180926305b959ef60e01b825260606004830152611f59611f476064840189612ad4565b60031984820301602485015287612b66565b600319838203016044840152815180825260208201916020808360051b8301019401928c915b83831061261557505050505091818060209403915afa90811561260a5786916125eb575b50156125dc576020810135916020810151600181018091116125c85783036125b95760600192611fd3845161347d565b60608201611fec611fe76103dc8386612c6f565b61347d565b612002611ff883612ca5565b6102c836866128f4565b156125aa57604083016120158185612d01565b810195906020818803126116b85780359067ffffffffffffffff8211611f0a57019686601f890112156116b85787359661204e8861280d565b9861205c6040519a8b6127ce565b888a5260208a01906020829a60051b8201019283116125a657602001905b828210612596575050508535906004821015611f0a5761209982612b1b565b6002820361258757516120af6103dc8689612c6f565b9060028a5103612578576120e18160406120d8816120cf61211996612a48565b51015192612a55565b51015190612c62565b916121136121038c6120fc6120f582612a48565b5191612a55565b5190613558565b9160406120d8816120cf84612a48565b92613558565b036125695761212b6103dc8588612c6f565b600486018b878c6001600160a01b03845416928d8482935b60028510612508575050915091825b600284106124555793505050509190919060088801915b600281106124125750505050600d85019061218381612b1b565b60ff60ff198354169116179055600e8401556121a3600f84019185612d01565b9067ffffffffffffffff82116123fe576121bd8354612d34565b601f81116123ce575b508990601f831160011461236a576121f492918b918361235f5750506000198260011b9260031b1c19161790565b90555b612205601083019184612c6f565b91906122118383612d85565b9088526020882088915b8383106122f9575050505060116122389101916080810190612c6f565b906122438284612e0c565b9186526020862086925b8284106122bb57505050506040519160208301906020845251809152604083019190855b8181106122a55750505090807ff3b6c524f73df7344d9fcf2f960a57aba7fba7e292d8b79ed03d786f7b2b112f920390a280f35b8251845260209384019390920191600101612271565b80359060ff8216809203610eda57606060039160019360ff19865416178555602081013584860155604081013560028601550192019301929061224d565b60036060826001600160a01b03612311600195612df8565b166001600160a01b031986541617855561232d60208201612df8565b6001600160a01b0385870191166001600160a01b0319825416179055604081013560028601550192019201919061221b565b013590508b80610344565b838b5260208b2091601f1984168c5b8181106123b6575090846001959493921061239c575b505050811b0190556121f7565b60001960f88560031b161c199101351690558a808061238f565b91936020600181928787013581550195019201612379565b6123f890848c5260208c20601f850160051c8101916020861061077257601f0160051c0190612d6e565b8a6121c6565b60248a634e487b7160e01b81526041600452fd5b80604061242160019385612a65565b5101518261242f8388612e7f565b500155604061243e8285612a65565b5101518261244c8387612e7f565b50015501612169565b61245f8484612a65565b5112612473575b50506001018b898f612152565b826001600160a01b0361248982612497946132af565b90549060031b1c1692612a65565b517f800000000000000000000000000000000000000000000000000000000000000081146124f3578f918f6124ea9260019594604051936124d78561277a565b84528760208501520360408301526138c2565b90508b89612466565b5060248f634e487b7160e01b81526011600452fd5b60019585946125178686612a65565b5113612530575b50505050500188908e8d8f8590612143565b846001600160a01b0361254961255e97612557946132af565b90549060031b1c1694612a65565b5192613761565b808d8f85908d61251e565b60048a6314b932c760e21b8152fd5b60048c63baf3f0f760e01b8152fd5b60048b63baf3f0f760e01b8152fd5b813581526020918201910161207a565b8c80fd5b60048763773a750f60e01b8152fd5b60048663baf3f0f760e01b8152fd5b602487634e487b7160e01b81526011600452fd5b60048563baf3f0f760e01b8152fd5b612604915060203d6020116101e9576101db81836127ce565b86611fa3565b6040513d88823e3d90fd5b91939550919360208061263483601f1986600196030187528951612b66565b97019301930190928795949293611f7f565b6020906040516126558161275e565b8c81528c83820152606060408201526060808201526060608082015282828c01015201611e9a565b602489634e487b7160e01b81526011600452fd5b8780fd5b6004866307a92f1960e51b8152fd5b6379c1d89f60e11b60005260045260246000fd5b90606060031983011261022e576004359160243567ffffffffffffffff811161022e5760a0600319828403011261022e576004019160443567ffffffffffffffff811161022e578260238201121561022e5780600401359267ffffffffffffffff841161022e5760248460051b8301011161022e576024019190565b600435906001600160a01b038216820361022e57565b35906001600160a01b038216820361022e57565b60a0810190811067ffffffffffffffff82111761103057604052565b6060810190811067ffffffffffffffff82111761103057604052565b6040810190811067ffffffffffffffff82111761103057604052565b6080810190811067ffffffffffffffff82111761103057604052565b90601f601f19910116810190811067ffffffffffffffff82111761103057604052565b67ffffffffffffffff811161103057601f01601f191660200190565b67ffffffffffffffff81116110305760051b60200190565b9291926128318261280d565b9361283f60405195866127ce565b606060208685815201930282019181831161022e57925b8284106128635750505050565b60608483031261022e57602060609160405161287e8161277a565b6128878761274a565b815261289483880161274a565b8382015260408701356040820152815201930192612856565b359060ff8216820361022e57565b919082606091031261022e576040516128d38161277a565b60408082946128e1816128ad565b8452602081013560208501520135910152565b919060a08382031261022e5760405161290c8161275e565b80938035600481101561022e57825260208101356020830152604081013567ffffffffffffffff811161022e57810183601f8201121561022e578035612951816127f1565b9161295f60405193846127ce565b818352856020838301011161022e5781600092602080930183860137830101526040830152606081013567ffffffffffffffff811161022e57810183601f8201121561022e57838160206129b593359101612825565b606083015260808101359067ffffffffffffffff821161022e570182601f8201121561022e5780356129e68161280d565b936129f460405195866127ce565b8185526020606081870193028401019281841161022e57602001915b838310612a21575050505060800152565b6020606091612a3084866128bb565b815201920191612a10565b9190820391821161051c57565b8051156110575760200190565b8051600110156110575760400190565b80518210156110575760209160051b010190565b9081602091031261022e5751801515810361022e5790565b906020825491828152019160005260206000209060005b818110612ab55750505090565b82546001600160a01b0316845260209093019260019283019201612aa8565b9060808152606067ffffffffffffffff6002612af36080850186612a91565b948260018201546001600160a01b038116602088015260a01c16604086015201541691015290565b6004111561082c57565b919082519283825260005b848110612b51575050601f19601f8460006020809697860101520116010190565b80602080928401015182828601015201612b30565b8051612b7181612b1b565b825260208101516020830152612b96604082015160a0604085015260a0840190612b25565b9060608101519183810360608501526020808451928381520193019060005b818110612c1a57505050608001519160808183039101526020808351928381520192019060005b818110612be95750505090565b909192602060606001926040875160ff81511683528481015185840152015160408201520194019101919091612bdc565b9091936020612c5860019287519060406060926001600160a01b0381511683526001600160a01b036020820151166020840152015160408201520190565b9501929101612bb5565b9190820180921161051c57565b903590601e198136030182121561022e570180359067ffffffffffffffff821161022e5760200191606082023603831361022e57565b90604051612cb2816127b2565b606067ffffffffffffffff60028395604051612cd981612cd28185612a91565b03826127ce565b85528260018201546001600160a01b038116602088015260a01c166040860152015416910152565b903590601e198136030182121561022e570180359067ffffffffffffffff821161022e5760200191813603831361022e57565b90600182811c92168015612d64575b6020831014612d4e57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612d43565b818110612d79575050565b60008155600101612d6e565b9068010000000000000000811161103057815491818155828210612da857505050565b8260030292600384040361051c578160030291600383040361051c57600052602060002091820191015b818110612ddd575050565b80600060039255600060018201556000600282015501612dd2565b356001600160a01b038116810361022e5790565b9068010000000000000000811161103057815491818155828210612e2f57505050565b8260030292600384040361051c578160030291600383040361051c57600052602060002091820191015b818110612e64575050565b80600060039255600060018201556000600282015501612e59565b9060028110156110575760011b0190600090565b9190811015611057576060020190565b9035601e198236030181121561022e57016020813591019167ffffffffffffffff821161022e57606082023603831361022e57565b8035600481101561022e57612eec81612b1b565b8252602081013560208301526040810135601e198236030181121561022e57810160208135910167ffffffffffffffff821161022e57813603811361022e5781601f1992601f9260a060408801528160a088015260c0870137600060c08287010152011682019060c082019160e0612f676060840184612ea3565b86840360c00160608801529485905291019260005b818110612fef57505050612f968160806020930190612ea3565b929093608081830391015282815201919060005b818110612fb75750505090565b90919260608060019260ff612fcb886128ad565b16815260208701356020820152604087013560408201520194019101919091612faa565b9091936060806001926001600160a01b036130098961274a565b1681526001600160a01b0361302060208a0161274a565b16602082015260408881013590820152019501929101612f7c565b9161305161305f92606085526060850190612ad4565b908382036020850152612ed8565b906040818303910152828152602081019260208160051b8301019383600091609e1982360301945b848410613098575050505050505090565b90919293949596601f1982820301835287358781121561022e5760206130c360019387839401612ed8565b990193019401929195949390613087565b906040516130e18161275e565b809260ff8154166130f181612b1b565b825260018101546020830152600281016040519081600082549261311484612d34565b808452936001811690811561328d5750600114613246575b50613139925003826127ce565b604083015260038101805461314d8161280d565b9161315b60405193846127ce565b818352602083019060005260206000206000915b8383106131fd5750505050906004916060840152019081546131908161280d565b9261319e60405194856127ce565b818452602084019060005260206000206000915b8383106131c3575050505060800152565b600360206001926040516131d68161277a565b60ff86541681528486015483820152600286015460408201528152019201920191906131b2565b600360206001926040516132108161277a565b6001600160a01b0386541681526001600160a01b038587015416838201526002860154604082015281520192019201919061316f565b90506000929192526020600020906000915b818310613271575050906020613139928201013861312c565b6020919350806001915483858801015201910190918392613258565b6020935061313995925060ff1991501682840152151560051b8201013861312c565b80548210156110575760005260206000200190600090565b906040516132d481612796565b6020600182946001600160a01b0381541684520154910152565b919061331c576020816001600160a01b03806001945116166001600160a01b03198554161784550151910155565b634e487b7160e01b600052600060045260246000fd5b903590601e198136030182121561022e570180359067ffffffffffffffff821161022e57602001918160051b3603831361022e57565b3567ffffffffffffffff8116810361022e5790565b359067ffffffffffffffff8216820361022e57565b91909160808184031261022e57604051906133ac826127b2565b8193813567ffffffffffffffff811161022e5782019080601f8301121561022e5781356133d88161280d565b926133e660405194856127ce565b81845260208085019260051b82010192831161022e57602001905b828210613442575050506060809261343d9285526134216020820161274a565b60208601526134326040820161337d565b60408601520161337d565b910152565b6020809161344f8461274a565b815201910190613401565b60048101905b81811061346b575050565b60008082556001820155600201613460565b60028151036107a1576001600160a01b0360206134a8828261349e86612a48565b5101511693612a55565b51015116036107a157565b9060806134c08284613641565b9101918251600281511480159061354b575b613542576134e26134fe91612a48565b516001600160a01b036134f58451612a48565b51169084613729565b1561353a576001600160a01b0361352361351b61352b9551612a55565b519251612a55565b511691613729565b1561353557600190565b600090565b505050600090565b50505050600090565b50600282515114156134d2565b9190916000838201938412911290801582169115161761051c57565b919091602060405180927fcc2a842d00000000000000000000000000000000000000000000000000000000825260406004830152816001600160a01b03816135d46135c2604483018b612ed8565b60031983820301602484015289612b66565b0392165afa8091600091613603575b50906135f757506020809101519101351190565b905060008092500b1390565b6020813d602011613639575b8161361c602093836127ce565b81010312610deb57519081810b82036136365750386135e3565b80fd5b3d915061360f565b61364a9061382a565b9080519061365782612b1b565b60208101519161369c60606040840151930151926040519485936020850197885261368181612b1b565b6040850152606084015260a0608084015260c0830190612b25565b91601f198284030160a08301526020808251948581520191019260005b8181106136db5750506136d5925003601f1981018352826127ce565b51902090565b91600191935061371a60209186519060406060926001600160a01b0381511683526001600160a01b036020820151166020840152015160408201520190565b940191019184929391936136b9565b61375a926137516001600160a01b039392849360ff8151166040602083015192015192613ab6565b90959195613b3f565b1691161490565b8315613824576001600160a01b0316600052600160205260406000206001600160a01b038316600052806020526040600020548481106137f257506001600160a01b03831660005260205260406000206137bc848254612a3b565b905560005260006020526001600160a01b03601260406000200191166000526020526137ee6040600020918254612c62565b9055565b84907fcf4791810000000000000000000000000000000000000000000000000000000060005260045260245260446000fd5b50505050565b80516001600160a01b0360208301511667ffffffffffffffff60608160408601511694015116604051928391602083019560a0840194608088528351809652602060c0860194019560005b8181106138a05750506136d5955060408501526060840152608083015203601f1981018352826127ce565b87516001600160a01b0316865260209788019789975090950194600101613875565b90604081019182511561397a57600052600060205260126040600020019160208201916001600160a01b0380845116166000528360205260406000205480156139735791516001600160a01b03928181111561396b5750935b8280855116166000526020526040600020613937858254612a3b565b9055511660005260016020526001600160a01b03806040600020925116166000526020526137ee6040600020918254612c62565b90509361391b565b5050505050565b505050565b600181019082600052816020526040600020541560001461353a57805468010000000000000000811015611030576139d86139c18260018794018555846132af565b81939154906000199060031b92831b921b19161790565b90555491600052602052604060002055600190565b906001820191816000528260205260406000205480151560001461354257600019810181811161051c57825490600019820191821161051c57818103613a7f575b50505080548015613a69576000190190613a4882826132af565b60001982549160031b1b191690555560005260205260006040812055600190565b634e487b7160e01b600052603160045260246000fd5b613a9f613a8f6139c193866132af565b90549060031b1c928392866132af565b905560005283602052604060002055388080613a2e565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411613b33579160209360809260ff60009560405194855216868401526040830152606082015282805260015afa156101f0576000516001600160a01b03811615613b275790600090600090565b50600090600190600090565b50505060009160039190565b613b4881612b1b565b80613b51575050565b613b5a81612b1b565b60018103613b8c577ff645eedf0000000000000000000000000000000000000000000000000000000060005260046000fd5b613b9581612b1b565b60028103613bcb57507ffce698f70000000000000000000000000000000000000000000000000000000060005260045260246000fd5b600390613bd781612b1b565b14613bdf5750565b7fd78bce0c0000000000000000000000000000000000000000000000000000000060005260045260246000fdfea26469706673582212208b7e5c4cfd9248cc4229a893b956b99bec66433c963bc46e28011c883d4bcb5a64736f6c634300081a0033",
}

// CustodyABI is the input ABI used to generate the binding from.
// Deprecated: Use CustodyMetaData.ABI instead.
var CustodyABI = CustodyMetaData.ABI

// CustodyBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CustodyMetaData.Bin instead.
var CustodyBin = CustodyMetaData.Bin

// DeployCustody deploys a new Ethereum contract, binding an instance of Custody to it.
func DeployCustody(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Custody, error) {
	parsed, err := CustodyMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CustodyBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Custody{CustodyCaller: CustodyCaller{contract: contract}, CustodyTransactor: CustodyTransactor{contract: contract}, CustodyFilterer: CustodyFilterer{contract: contract}}, nil
}

// Custody is an auto generated Go binding around an Ethereum contract.
type Custody struct {
	CustodyCaller     // Read-only binding to the contract
	CustodyTransactor // Write-only binding to the contract
	CustodyFilterer   // Log filterer for contract events
}

// CustodyCaller is an auto generated read-only Go binding around an Ethereum contract.
type CustodyCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustodyTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CustodyTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustodyFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CustodyFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CustodySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CustodySession struct {
	Contract     *Custody          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CustodyCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CustodyCallerSession struct {
	Contract *CustodyCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// CustodyTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CustodyTransactorSession struct {
	Contract     *CustodyTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// CustodyRaw is an auto generated low-level Go binding around an Ethereum contract.
type CustodyRaw struct {
	Contract *Custody // Generic contract binding to access the raw methods on
}

// CustodyCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CustodyCallerRaw struct {
	Contract *CustodyCaller // Generic read-only contract binding to access the raw methods on
}

// CustodyTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CustodyTransactorRaw struct {
	Contract *CustodyTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCustody creates a new instance of Custody, bound to a specific deployed contract.
func NewCustody(address common.Address, backend bind.ContractBackend) (*Custody, error) {
	contract, err := bindCustody(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Custody{CustodyCaller: CustodyCaller{contract: contract}, CustodyTransactor: CustodyTransactor{contract: contract}, CustodyFilterer: CustodyFilterer{contract: contract}}, nil
}

// NewCustodyCaller creates a new read-only instance of Custody, bound to a specific deployed contract.
func NewCustodyCaller(address common.Address, caller bind.ContractCaller) (*CustodyCaller, error) {
	contract, err := bindCustody(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CustodyCaller{contract: contract}, nil
}

// NewCustodyTransactor creates a new write-only instance of Custody, bound to a specific deployed contract.
func NewCustodyTransactor(address common.Address, transactor bind.ContractTransactor) (*CustodyTransactor, error) {
	contract, err := bindCustody(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CustodyTransactor{contract: contract}, nil
}

// NewCustodyFilterer creates a new log filterer instance of Custody, bound to a specific deployed contract.
func NewCustodyFilterer(address common.Address, filterer bind.ContractFilterer) (*CustodyFilterer, error) {
	contract, err := bindCustody(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CustodyFilterer{contract: contract}, nil
}

// bindCustody binds a generic wrapper to an already deployed contract.
func bindCustody(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CustodyMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Custody *CustodyRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Custody.Contract.CustodyCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Custody *CustodyRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Custody.Contract.CustodyTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Custody *CustodyRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Custody.Contract.CustodyTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Custody *CustodyCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Custody.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Custody *CustodyTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Custody.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Custody *CustodyTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Custody.Contract.contract.Transact(opts, method, params...)
}

// GetAccountChannels is a free data retrieval call binding the contract method 0x7e2d8d72.
//
// Solidity: function getAccountChannels(address account) view returns(bytes32[])
func (_Custody *CustodyCaller) GetAccountChannels(opts *bind.CallOpts, account common.Address) ([][32]byte, error) {
	var out []interface{}
	err := _Custody.contract.Call(opts, &out, "getAccountChannels", account)

	if err != nil {
		return *new([][32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([][32]byte)).(*[][32]byte)

	return out0, err

}

// GetAccountChannels is a free data retrieval call binding the contract method 0x7e2d8d72.
//
// Solidity: function getAccountChannels(address account) view returns(bytes32[])
func (_Custody *CustodySession) GetAccountChannels(account common.Address) ([][32]byte, error) {
	return _Custody.Contract.GetAccountChannels(&_Custody.CallOpts, account)
}

// GetAccountChannels is a free data retrieval call binding the contract method 0x7e2d8d72.
//
// Solidity: function getAccountChannels(address account) view returns(bytes32[])
func (_Custody *CustodyCallerSession) GetAccountChannels(account common.Address) ([][32]byte, error) {
	return _Custody.Contract.GetAccountChannels(&_Custody.CallOpts, account)
}

// GetAccountInfo is a free data retrieval call binding the contract method 0x6332fef6.
//
// Solidity: function getAccountInfo(address user, address token) view returns(uint256 available, uint256 channelCount)
func (_Custody *CustodyCaller) GetAccountInfo(opts *bind.CallOpts, user common.Address, token common.Address) (struct {
	Available    *big.Int
	ChannelCount *big.Int
}, error) {
	var out []interface{}
	err := _Custody.contract.Call(opts, &out, "getAccountInfo", user, token)

	outstruct := new(struct {
		Available    *big.Int
		ChannelCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Available = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ChannelCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetAccountInfo is a free data retrieval call binding the contract method 0x6332fef6.
//
// Solidity: function getAccountInfo(address user, address token) view returns(uint256 available, uint256 channelCount)
func (_Custody *CustodySession) GetAccountInfo(user common.Address, token common.Address) (struct {
	Available    *big.Int
	ChannelCount *big.Int
}, error) {
	return _Custody.Contract.GetAccountInfo(&_Custody.CallOpts, user, token)
}

// GetAccountInfo is a free data retrieval call binding the contract method 0x6332fef6.
//
// Solidity: function getAccountInfo(address user, address token) view returns(uint256 available, uint256 channelCount)
func (_Custody *CustodyCallerSession) GetAccountInfo(user common.Address, token common.Address) (struct {
	Available    *big.Int
	ChannelCount *big.Int
}, error) {
	return _Custody.Contract.GetAccountInfo(&_Custody.CallOpts, user, token)
}

// Challenge is a paid mutator transaction binding the contract method 0x7de7ad62.
//
// Solidity: function challenge(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactor) Challenge(opts *bind.TransactOpts, channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "challenge", channelId, candidate, proofs)
}

// Challenge is a paid mutator transaction binding the contract method 0x7de7ad62.
//
// Solidity: function challenge(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodySession) Challenge(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Challenge(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Challenge is a paid mutator transaction binding the contract method 0x7de7ad62.
//
// Solidity: function challenge(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactorSession) Challenge(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Challenge(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Checkpoint is a paid mutator transaction binding the contract method 0xd0cce1e8.
//
// Solidity: function checkpoint(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactor) Checkpoint(opts *bind.TransactOpts, channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "checkpoint", channelId, candidate, proofs)
}

// Checkpoint is a paid mutator transaction binding the contract method 0xd0cce1e8.
//
// Solidity: function checkpoint(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodySession) Checkpoint(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Checkpoint(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Checkpoint is a paid mutator transaction binding the contract method 0xd0cce1e8.
//
// Solidity: function checkpoint(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactorSession) Checkpoint(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Checkpoint(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Close is a paid mutator transaction binding the contract method 0xde22731f.
//
// Solidity: function close(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] ) returns()
func (_Custody *CustodyTransactor) Close(opts *bind.TransactOpts, channelId [32]byte, candidate State, arg2 []State) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "close", channelId, candidate, arg2)
}

// Close is a paid mutator transaction binding the contract method 0xde22731f.
//
// Solidity: function close(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] ) returns()
func (_Custody *CustodySession) Close(channelId [32]byte, candidate State, arg2 []State) (*types.Transaction, error) {
	return _Custody.Contract.Close(&_Custody.TransactOpts, channelId, candidate, arg2)
}

// Close is a paid mutator transaction binding the contract method 0xde22731f.
//
// Solidity: function close(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] ) returns()
func (_Custody *CustodyTransactorSession) Close(channelId [32]byte, candidate State, arg2 []State) (*types.Transaction, error) {
	return _Custody.Contract.Close(&_Custody.TransactOpts, channelId, candidate, arg2)
}

// Create is a paid mutator transaction binding the contract method 0xd37ff7b5.
//
// Solidity: function create((address[],address,uint64,uint64) ch, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial) returns(bytes32 channelId)
func (_Custody *CustodyTransactor) Create(opts *bind.TransactOpts, ch Channel, initial State) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "create", ch, initial)
}

// Create is a paid mutator transaction binding the contract method 0xd37ff7b5.
//
// Solidity: function create((address[],address,uint64,uint64) ch, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial) returns(bytes32 channelId)
func (_Custody *CustodySession) Create(ch Channel, initial State) (*types.Transaction, error) {
	return _Custody.Contract.Create(&_Custody.TransactOpts, ch, initial)
}

// Create is a paid mutator transaction binding the contract method 0xd37ff7b5.
//
// Solidity: function create((address[],address,uint64,uint64) ch, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial) returns(bytes32 channelId)
func (_Custody *CustodyTransactorSession) Create(ch Channel, initial State) (*types.Transaction, error) {
	return _Custody.Contract.Create(&_Custody.TransactOpts, ch, initial)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) payable returns()
func (_Custody *CustodyTransactor) Deposit(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "deposit", token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) payable returns()
func (_Custody *CustodySession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.Contract.Deposit(&_Custody.TransactOpts, token, amount)
}

// Deposit is a paid mutator transaction binding the contract method 0x47e7ef24.
//
// Solidity: function deposit(address token, uint256 amount) payable returns()
func (_Custody *CustodyTransactorSession) Deposit(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.Contract.Deposit(&_Custody.TransactOpts, token, amount)
}

// Join is a paid mutator transaction binding the contract method 0xa22b823d.
//
// Solidity: function join(bytes32 channelId, uint256 index, (uint8,bytes32,bytes32) sig) returns(bytes32)
func (_Custody *CustodyTransactor) Join(opts *bind.TransactOpts, channelId [32]byte, index *big.Int, sig Signature) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "join", channelId, index, sig)
}

// Join is a paid mutator transaction binding the contract method 0xa22b823d.
//
// Solidity: function join(bytes32 channelId, uint256 index, (uint8,bytes32,bytes32) sig) returns(bytes32)
func (_Custody *CustodySession) Join(channelId [32]byte, index *big.Int, sig Signature) (*types.Transaction, error) {
	return _Custody.Contract.Join(&_Custody.TransactOpts, channelId, index, sig)
}

// Join is a paid mutator transaction binding the contract method 0xa22b823d.
//
// Solidity: function join(bytes32 channelId, uint256 index, (uint8,bytes32,bytes32) sig) returns(bytes32)
func (_Custody *CustodyTransactorSession) Join(channelId [32]byte, index *big.Int, sig Signature) (*types.Transaction, error) {
	return _Custody.Contract.Join(&_Custody.TransactOpts, channelId, index, sig)
}

// Resize is a paid mutator transaction binding the contract method 0x259311c9.
//
// Solidity: function resize(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactor) Resize(opts *bind.TransactOpts, channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "resize", channelId, candidate, proofs)
}

// Resize is a paid mutator transaction binding the contract method 0x259311c9.
//
// Solidity: function resize(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodySession) Resize(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Resize(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Resize is a paid mutator transaction binding the contract method 0x259311c9.
//
// Solidity: function resize(bytes32 channelId, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) candidate, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[])[] proofs) returns()
func (_Custody *CustodyTransactorSession) Resize(channelId [32]byte, candidate State, proofs []State) (*types.Transaction, error) {
	return _Custody.Contract.Resize(&_Custody.TransactOpts, channelId, candidate, proofs)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address token, uint256 amount) returns()
func (_Custody *CustodyTransactor) Withdraw(opts *bind.TransactOpts, token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.contract.Transact(opts, "withdraw", token, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address token, uint256 amount) returns()
func (_Custody *CustodySession) Withdraw(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.Contract.Withdraw(&_Custody.TransactOpts, token, amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0xf3fef3a3.
//
// Solidity: function withdraw(address token, uint256 amount) returns()
func (_Custody *CustodyTransactorSession) Withdraw(token common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Custody.Contract.Withdraw(&_Custody.TransactOpts, token, amount)
}

// CustodyChallengedIterator is returned from FilterChallenged and is used to iterate over the raw logs and unpacked data for Challenged events raised by the Custody contract.
type CustodyChallengedIterator struct {
	Event *CustodyChallenged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyChallengedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyChallenged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyChallenged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyChallengedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyChallengedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyChallenged represents a Challenged event raised by the Custody contract.
type CustodyChallenged struct {
	ChannelId  [32]byte
	Expiration *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterChallenged is a free log retrieval operation binding the contract event 0x08818bbbf6e59017d5461143d9f1c4e3fb74703f7fb792c207cbeed4b344cefc.
//
// Solidity: event Challenged(bytes32 indexed channelId, uint256 expiration)
func (_Custody *CustodyFilterer) FilterChallenged(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyChallengedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Challenged", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyChallengedIterator{contract: _Custody.contract, event: "Challenged", logs: logs, sub: sub}, nil
}

// WatchChallenged is a free log subscription operation binding the contract event 0x08818bbbf6e59017d5461143d9f1c4e3fb74703f7fb792c207cbeed4b344cefc.
//
// Solidity: event Challenged(bytes32 indexed channelId, uint256 expiration)
func (_Custody *CustodyFilterer) WatchChallenged(opts *bind.WatchOpts, sink chan<- *CustodyChallenged, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Challenged", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyChallenged)
				if err := _Custody.contract.UnpackLog(event, "Challenged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChallenged is a log parse operation binding the contract event 0x08818bbbf6e59017d5461143d9f1c4e3fb74703f7fb792c207cbeed4b344cefc.
//
// Solidity: event Challenged(bytes32 indexed channelId, uint256 expiration)
func (_Custody *CustodyFilterer) ParseChallenged(log types.Log) (*CustodyChallenged, error) {
	event := new(CustodyChallenged)
	if err := _Custody.contract.UnpackLog(event, "Challenged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyCheckpointedIterator is returned from FilterCheckpointed and is used to iterate over the raw logs and unpacked data for Checkpointed events raised by the Custody contract.
type CustodyCheckpointedIterator struct {
	Event *CustodyCheckpointed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyCheckpointedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyCheckpointed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyCheckpointed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyCheckpointedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyCheckpointedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyCheckpointed represents a Checkpointed event raised by the Custody contract.
type CustodyCheckpointed struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCheckpointed is a free log retrieval operation binding the contract event 0x1f681d6befe6e92b986338164917aaa3f065b8d2de29bb520aa373114e5ec034.
//
// Solidity: event Checkpointed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) FilterCheckpointed(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyCheckpointedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Checkpointed", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyCheckpointedIterator{contract: _Custody.contract, event: "Checkpointed", logs: logs, sub: sub}, nil
}

// WatchCheckpointed is a free log subscription operation binding the contract event 0x1f681d6befe6e92b986338164917aaa3f065b8d2de29bb520aa373114e5ec034.
//
// Solidity: event Checkpointed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) WatchCheckpointed(opts *bind.WatchOpts, sink chan<- *CustodyCheckpointed, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Checkpointed", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyCheckpointed)
				if err := _Custody.contract.UnpackLog(event, "Checkpointed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCheckpointed is a log parse operation binding the contract event 0x1f681d6befe6e92b986338164917aaa3f065b8d2de29bb520aa373114e5ec034.
//
// Solidity: event Checkpointed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) ParseCheckpointed(log types.Log) (*CustodyCheckpointed, error) {
	event := new(CustodyCheckpointed)
	if err := _Custody.contract.UnpackLog(event, "Checkpointed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyClosedIterator is returned from FilterClosed and is used to iterate over the raw logs and unpacked data for Closed events raised by the Custody contract.
type CustodyClosedIterator struct {
	Event *CustodyClosed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyClosedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyClosed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyClosed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyClosedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyClosedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyClosed represents a Closed event raised by the Custody contract.
type CustodyClosed struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterClosed is a free log retrieval operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) FilterClosed(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyClosedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Closed", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyClosedIterator{contract: _Custody.contract, event: "Closed", logs: logs, sub: sub}, nil
}

// WatchClosed is a free log subscription operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) WatchClosed(opts *bind.WatchOpts, sink chan<- *CustodyClosed, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Closed", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyClosed)
				if err := _Custody.contract.UnpackLog(event, "Closed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClosed is a log parse operation binding the contract event 0x7b6ac8bce3193cb9464e9070476bf8926e449f5f743f8c7578eea15265467d79.
//
// Solidity: event Closed(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) ParseClosed(log types.Log) (*CustodyClosed, error) {
	event := new(CustodyClosed)
	if err := _Custody.contract.UnpackLog(event, "Closed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyCreatedIterator is returned from FilterCreated and is used to iterate over the raw logs and unpacked data for Created events raised by the Custody contract.
type CustodyCreatedIterator struct {
	Event *CustodyCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyCreated represents a Created event raised by the Custody contract.
type CustodyCreated struct {
	ChannelId [32]byte
	Channel   Channel
	Initial   State
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCreated is a free log retrieval operation binding the contract event 0xeb84f2497711f038aa068f535dac65569ca5f694054c11ee7439cde944382164.
//
// Solidity: event Created(bytes32 indexed channelId, (address[],address,uint64,uint64) channel, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial)
func (_Custody *CustodyFilterer) FilterCreated(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyCreatedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Created", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyCreatedIterator{contract: _Custody.contract, event: "Created", logs: logs, sub: sub}, nil
}

// WatchCreated is a free log subscription operation binding the contract event 0xeb84f2497711f038aa068f535dac65569ca5f694054c11ee7439cde944382164.
//
// Solidity: event Created(bytes32 indexed channelId, (address[],address,uint64,uint64) channel, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial)
func (_Custody *CustodyFilterer) WatchCreated(opts *bind.WatchOpts, sink chan<- *CustodyCreated, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Created", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyCreated)
				if err := _Custody.contract.UnpackLog(event, "Created", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreated is a log parse operation binding the contract event 0xeb84f2497711f038aa068f535dac65569ca5f694054c11ee7439cde944382164.
//
// Solidity: event Created(bytes32 indexed channelId, (address[],address,uint64,uint64) channel, (uint8,uint256,bytes,(address,address,uint256)[],(uint8,bytes32,bytes32)[]) initial)
func (_Custody *CustodyFilterer) ParseCreated(log types.Log) (*CustodyCreated, error) {
	event := new(CustodyCreated)
	if err := _Custody.contract.UnpackLog(event, "Created", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyJoinedIterator is returned from FilterJoined and is used to iterate over the raw logs and unpacked data for Joined events raised by the Custody contract.
type CustodyJoinedIterator struct {
	Event *CustodyJoined // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyJoinedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyJoined)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyJoined)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyJoinedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyJoinedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyJoined represents a Joined event raised by the Custody contract.
type CustodyJoined struct {
	ChannelId [32]byte
	Index     *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterJoined is a free log retrieval operation binding the contract event 0xe8e915db7b3549b9e9e9b3e2ec2dc3edd1f76961504366998824836401f6846a.
//
// Solidity: event Joined(bytes32 indexed channelId, uint256 index)
func (_Custody *CustodyFilterer) FilterJoined(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyJoinedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Joined", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyJoinedIterator{contract: _Custody.contract, event: "Joined", logs: logs, sub: sub}, nil
}

// WatchJoined is a free log subscription operation binding the contract event 0xe8e915db7b3549b9e9e9b3e2ec2dc3edd1f76961504366998824836401f6846a.
//
// Solidity: event Joined(bytes32 indexed channelId, uint256 index)
func (_Custody *CustodyFilterer) WatchJoined(opts *bind.WatchOpts, sink chan<- *CustodyJoined, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Joined", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyJoined)
				if err := _Custody.contract.UnpackLog(event, "Joined", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseJoined is a log parse operation binding the contract event 0xe8e915db7b3549b9e9e9b3e2ec2dc3edd1f76961504366998824836401f6846a.
//
// Solidity: event Joined(bytes32 indexed channelId, uint256 index)
func (_Custody *CustodyFilterer) ParseJoined(log types.Log) (*CustodyJoined, error) {
	event := new(CustodyJoined)
	if err := _Custody.contract.UnpackLog(event, "Joined", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyOpenedIterator is returned from FilterOpened and is used to iterate over the raw logs and unpacked data for Opened events raised by the Custody contract.
type CustodyOpenedIterator struct {
	Event *CustodyOpened // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyOpenedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyOpened)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyOpened)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyOpenedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyOpenedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyOpened represents a Opened event raised by the Custody contract.
type CustodyOpened struct {
	ChannelId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterOpened is a free log retrieval operation binding the contract event 0xd087f17acc177540af5f382bc30c65363705b90855144d285a822536ee11fdd1.
//
// Solidity: event Opened(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) FilterOpened(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyOpenedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Opened", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyOpenedIterator{contract: _Custody.contract, event: "Opened", logs: logs, sub: sub}, nil
}

// WatchOpened is a free log subscription operation binding the contract event 0xd087f17acc177540af5f382bc30c65363705b90855144d285a822536ee11fdd1.
//
// Solidity: event Opened(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) WatchOpened(opts *bind.WatchOpts, sink chan<- *CustodyOpened, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Opened", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyOpened)
				if err := _Custody.contract.UnpackLog(event, "Opened", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOpened is a log parse operation binding the contract event 0xd087f17acc177540af5f382bc30c65363705b90855144d285a822536ee11fdd1.
//
// Solidity: event Opened(bytes32 indexed channelId)
func (_Custody *CustodyFilterer) ParseOpened(log types.Log) (*CustodyOpened, error) {
	event := new(CustodyOpened)
	if err := _Custody.contract.UnpackLog(event, "Opened", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CustodyResizedIterator is returned from FilterResized and is used to iterate over the raw logs and unpacked data for Resized events raised by the Custody contract.
type CustodyResizedIterator struct {
	Event *CustodyResized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CustodyResizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CustodyResized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CustodyResized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CustodyResizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CustodyResizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CustodyResized represents a Resized event raised by the Custody contract.
type CustodyResized struct {
	ChannelId        [32]byte
	DeltaAllocations []*big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterResized is a free log retrieval operation binding the contract event 0xf3b6c524f73df7344d9fcf2f960a57aba7fba7e292d8b79ed03d786f7b2b112f.
//
// Solidity: event Resized(bytes32 indexed channelId, int256[] deltaAllocations)
func (_Custody *CustodyFilterer) FilterResized(opts *bind.FilterOpts, channelId [][32]byte) (*CustodyResizedIterator, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.FilterLogs(opts, "Resized", channelIdRule)
	if err != nil {
		return nil, err
	}
	return &CustodyResizedIterator{contract: _Custody.contract, event: "Resized", logs: logs, sub: sub}, nil
}

// WatchResized is a free log subscription operation binding the contract event 0xf3b6c524f73df7344d9fcf2f960a57aba7fba7e292d8b79ed03d786f7b2b112f.
//
// Solidity: event Resized(bytes32 indexed channelId, int256[] deltaAllocations)
func (_Custody *CustodyFilterer) WatchResized(opts *bind.WatchOpts, sink chan<- *CustodyResized, channelId [][32]byte) (event.Subscription, error) {

	var channelIdRule []interface{}
	for _, channelIdItem := range channelId {
		channelIdRule = append(channelIdRule, channelIdItem)
	}

	logs, sub, err := _Custody.contract.WatchLogs(opts, "Resized", channelIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CustodyResized)
				if err := _Custody.contract.UnpackLog(event, "Resized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResized is a log parse operation binding the contract event 0xf3b6c524f73df7344d9fcf2f960a57aba7fba7e292d8b79ed03d786f7b2b112f.
//
// Solidity: event Resized(bytes32 indexed channelId, int256[] deltaAllocations)
func (_Custody *CustodyFilterer) ParseResized(log types.Log) (*CustodyResized, error) {
	event := new(CustodyResized)
	if err := _Custody.contract.UnpackLog(event, "Resized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
