#!/usr/bin/env node

import fs from 'fs-extra';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Inject SDK version into src files at build time
 */
async function injectSDKVersion(): Promise<void> {
  try {
    console.log('üîÑ Injecting SDK version into source files...');

    // Read SDK version from the main SDK package.json
    const sdkPackageJsonPath = path.resolve(__dirname, '../../package.json');
    
    if (!fs.existsSync(sdkPackageJsonPath)) {
      throw new Error(`SDK package.json not found at: ${sdkPackageJsonPath}`);
    }

    const sdkPackageJson = JSON.parse(await fs.readFile(sdkPackageJsonPath, 'utf-8'));
    const sdkVersion = sdkPackageJson.version;

    if (!sdkVersion) {
      throw new Error('SDK version not found in package.json');
    }

    console.log(`üì¶ Found SDK version: ${sdkVersion}`);

    // Create/update version constants file
    await createVersionConstants(sdkVersion);
    
    console.log(`‚úÖ Successfully injected SDK version into source files`);
    
  } catch (error) {
    console.error('‚ùå Error injecting SDK version:', error);
    process.exit(1);
  }
}

/**
 * Create/update version constants file in src directory
 */
async function createVersionConstants(sdkVersion: string): Promise<void> {
  const versionFilePath = path.resolve(__dirname, '../src/constants/version.ts');
  
  const versionFileContent = `// This file is auto-generated by scripts/inject-version.ts
// Do not edit manually - it will be overwritten on build

export const SDK_VERSION = '${sdkVersion}';
`;

  // Ensure the constants directory exists
  await fs.ensureDir(path.dirname(versionFilePath));
  
  // Write the version constants file
  await fs.writeFile(versionFilePath, versionFileContent, 'utf-8');
  
  console.log(`  üìù Created: src/constants/version.ts`);
}

// Run the script
if (import.meta.url === `file://${process.argv[1]}`) {
  injectSDKVersion();
}